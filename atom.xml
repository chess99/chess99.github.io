<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cearl&#39;s</title>
  
  
  <link href="https://blog.cearl.cc/atom.xml" rel="self"/>
  
  <link href="https://blog.cearl.cc/"/>
  <updated>2022-02-19T14:42:39.170Z</updated>
  <id>https://blog.cearl.cc/</id>
  
  <author>
    <name>Cearl</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>File API</title>
    <link href="https://blog.cearl.cc/posts/12/"/>
    <id>https://blog.cearl.cc/posts/12/</id>
    <published>2019-09-17T16:00:02.000Z</published>
    <updated>2022-02-19T14:42:39.170Z</updated>
    
    <content type="html"><![CDATA[<p>File Api</p><span id="more"></span><h2 id="lt-input-type-quot-file-quot-gt"><a href="#lt-input-type-quot-file-quot-gt" class="headerlink" title="&lt;input type=&quot;file&quot;&gt;"></a><code>&lt;input type=&quot;file&quot;&gt;</code></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file">https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file</a>  </p><table><thead><tr><th><strong>Attribute</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#accept">accept</a></td><td>One or more <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Unique_file_type_specifiers">unique   file type specifiers</a> describing file   types to allow</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#capture">capture</a></td><td>What source to use for capturing image   or video data</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#files">files</a></td><td>A <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileList"><code>FileList</code></a> listing   the chosen files</td></tr><tr><td><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#multiple">multiple</a></td><td>A Boolean which, if present, indicates   that the user may choose more than one file</td></tr></tbody></table><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><p>Each unique file type specifier may take one of the following forms:  </p><p>· A valid case-insensitive filename extension, starting with a period (“.”) character. For example: <code>.jpg</code>, <code>.pdf</code>, or <code>.doc</code>.</p><p>· A valid MIME type string, with no extensions.</p><p>· The string <code>audio/*</code> meaning “any audio file”.</p><p>· The string <code>video/*</code> meaning “any video file”.</p><p>· The string <code>image/*</code> meaning “any image file”.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file">https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file</a>  </p><p><strong>栗子</strong>  </p><p>· <code>accept=&quot;image/png&quot;</code> or <code>accept=&quot;.png&quot;</code> — Accepts PNG files.</p><p>· <code>accept=&quot;image/png, image/jpeg&quot;</code> or <code>accept=&quot;.png, .jpg, .jpeg&quot;</code> — Accept PNG or JPEG files.</p><p>· <code>accept=&quot;image/*&quot;</code> — Accept any file with an <code>image/*</code> MIME type. (Many mobile devices also let the user take a picture with the camera when this is used.)</p><p>· <code>accept=&quot;.doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot;</code> — accept anything that smells like an MS Word document.  </p><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Limiting_accepted_file_types">https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#Limiting_accepted_file_types</a>  </p><h2 id="文件对象"><a href="#文件对象" class="headerlink" title="文件对象"></a>文件对象</h2><p><strong>FileList</strong>  <a href="https://developer.mozilla.org/en-US/docs/Web/API/FileList">https://developer.mozilla.org/en-US/docs/Web/API/FileList</a>  </p><p><strong>File</strong>     <a href="https://developer.mozilla.org/en-US/docs/Web/API/File">https://developer.mozilla.org/en-US/docs/Web/API/File</a>  </p><p>The FileList behaves like an array, so you can check its length property to get the number of selected files.  </p><p>Each <code>File</code> object contains the following information:</p><p><strong>name</strong><br>The file’s name.  </p><p><strong>lastModified</strong><br>A number specifying the date and time at which the file was last modified, in milliseconds since the UNIX epoch (January 1, 1970 at midnight).  </p><p><strong>lastModifiedDate</strong><br>A <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"><code>Date</code></a> object representing the date and time at which the file was last modified. <em>This is deprecated and should not be used. Use</em> <code>*lastModified*</code> <em>instead.</em></p><p><strong>size</strong><br>The size of the file in bytes.  </p><p><strong>type</strong><br>The file’s <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types">MIME type</a>.  </p><p><strong>webkitRelativePath</strong><br>A string specifying the file’s path relative to the base directory selected in a directory picker (that is, a <code>file</code> picker in which the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-webkitdirectory">webkitdirectory</a> attribute is set). <em>This is non-standard and should be used with caution.</em>  </p><h2 id="文件拖放"><a href="#文件拖放" class="headerlink" title="文件拖放"></a>文件拖放</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications#Selecting_files_using_drag_and_drop">https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications#Selecting_files_using_drag_and_drop</a>  </p><p><strong>DataTransfer对象</strong><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer">https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer</a><br>This object is available from the <a href="https://developer.mozilla.org/en-US/docs/Web/API/DragEvent/dataTransfer"><code>dataTransfer</code></a> property of all <a href="https://developer.mozilla.org/en-US/docs/Web/API/DragEvent"><code>drag events</code></a>.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/files"><code>DataTransfer.files</code></a><br>Contains a list of all the local files available on the data transfer. If the drag operation doesn’t involve dragging files, this property is an empty list.  </p><p><strong>拖拽API</strong><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API">https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API</a>  </p><h2 id="各种栗子"><a href="#各种栗子" class="headerlink" title="各种栗子"></a>各种栗子</h2><p>Using files from web applications<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications">https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications</a><br>图片预览, 文件上传等</p><h2 id="URL-createObjectURL"><a href="#URL-createObjectURL" class="headerlink" title="URL.createObjectURL()"></a>URL.createObjectURL()</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL">https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL</a>  </p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications#Using_object_URLs">https://developer.mozilla.org/en-US/docs/Web/API/File/Using_files_from_web_applications#Using_object_URLs</a></p><h2 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader">https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader</a>  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;File Api&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://blog.cearl.cc/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="webapi" scheme="https://blog.cearl.cc/tags/webapi/"/>
    
  </entry>
  
  <entry>
    <title>分析el-upload</title>
    <link href="https://blog.cearl.cc/posts/11/"/>
    <id>https://blog.cearl.cc/posts/11/</id>
    <published>2019-09-17T16:00:01.000Z</published>
    <updated>2022-02-19T14:42:39.166Z</updated>
    
    <content type="html"><![CDATA[<p>分析el-upload</p><span id="more"></span><p>  “name”: “element-ui”,<br>  “version”: “2.10.1”,  </p><p>组件文档: <a href="https://element.eleme.cn/#/en-US/component/upload">文档</a><br>源码在<code>packages/upload/</code>下: <a href="https://github.com/ElemeFE/element/tree/dev/packages/upload">链接</a>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-- upload</span><br><span class="line">    |-- index.js</span><br><span class="line">    |-- src</span><br><span class="line">        |-- ajax.js</span><br><span class="line">        |-- index.vue</span><br><span class="line">        |-- upload-dragger.vue</span><br><span class="line">        |-- upload-list.vue</span><br><span class="line">        |-- upload.vue</span><br></pre></td></tr></table></figure><p>样式在<code>packages/theme-chalk/src/index.scss</code>  </p><h2 id="index-vue"><a href="#index-vue" class="headerlink" title="index.vue"></a>index.vue</h2><p>整体集成了各组件:<br><a href="#Upload%E7%BB%84%E4%BB%B6"><code>Upload组件</code></a><br><a href="#UploadList%E7%BB%84%E4%BB%B6"><code>UploadList组件</code></a>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.vue</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> UploadList <span class="keyword">from</span> <span class="string">&#x27;./upload-list&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Upload <span class="keyword">from</span> <span class="string">&#x27;./upload&#x27;</span>;</span><br><span class="line"><span class="comment">// import ElProgress from &#x27;element-ui/packages/progress&#x27;; // 这里没有用到ElProgress, 实际在UploadList内才有用到</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// ...  </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> trigger = <span class="built_in">this</span>.$slots.trigger || <span class="built_in">this</span>.$slots.default;  </span><br><span class="line">    <span class="keyword">const</span> uploadComponent = <span class="xml"><span class="tag">&lt;<span class="name">upload</span> &#123;<span class="attr">...uploadData</span>&#125;&gt;</span>&#123;trigger&#125;<span class="tag">&lt;/<span class="name">upload</span>&gt;</span></span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123; this.listType === &#x27;picture-card&#x27; ? uploadList : &#x27;&#x27;&#125;</span></span><br><span class="line"><span class="xml">        &#123;</span></span><br><span class="line"><span class="xml">          this.$slots.trigger</span></span><br><span class="line"><span class="xml">            ? [uploadComponent, this.$slots.default]</span></span><br><span class="line"><span class="xml">            : uploadComponent</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        &#123;this.$slots.tip&#125;</span></span><br><span class="line"><span class="xml">        &#123; this.listType !== &#x27;picture-card&#x27; ? uploadList : &#x27;&#x27;&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Upload组件"><a href="#Upload组件" class="headerlink" title="Upload组件"></a>Upload组件</h2><p><code>upload.vue</code> 藏了一个获取文件所需的<code>&lt;input&gt;</code>,<br>若需响应拖放, 则在内容外层包一个注册了drag事件的<code>upload-dragger</code>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div &#123;...data&#125; tabindex=<span class="string">&quot;0&quot;</span> &gt;</span><br><span class="line">  &#123;</span><br><span class="line">    drag</span><br><span class="line">      ? <span class="xml"><span class="tag">&lt;<span class="name">upload-dragger</span> <span class="attr">disabled</span>=<span class="string">&#123;disabled&#125;</span> <span class="attr">on-file</span>=<span class="string">&#123;uploadFiles&#125;</span>&gt;</span>&#123;this.$slots.default&#125;<span class="tag">&lt;/<span class="name">upload-dragger</span>&gt;</span></span></span><br><span class="line">      : <span class="built_in">this</span>.$slots.default</span><br><span class="line">  &#125;</span><br><span class="line">  &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;el-upload__input&quot;</span> type=<span class="string">&quot;file&quot;</span> ref=<span class="string">&quot;input&quot;</span> name=&#123;name&#125; on-change=&#123;handleChange&#125; multiple=&#123;multiple&#125; accept=&#123;accept&#125;&gt;&lt;/input&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p><code>$slots.default</code>是上层<code>index.vue</code>传下来的”trigger”  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  <span class="attr">class</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;el-upload&#x27;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">on</span>: &#123;</span><br><span class="line">    <span class="attr">click</span>: handleClick,</span><br><span class="line">    <span class="attr">keydown</span>: handleKeydown</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><code>...data</code>里注册了点击事件和键盘事件(space键和enter键), 转而触发<code>&lt;input&gt;</code>的click事件 <code>this.$refs.input.click()</code><br>所以trigger slot里的并不是真正的trigger, 它爹才是, 只不过它爹捕获了冒泡上来的click事件<br>jsx相关用法见vue<a href="https://cn.vuejs.org/v2/guide/render-function.html#%E6%B7%B1%E5%85%A5%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1">官方文档</a>  </p><p><code>upload-dragger.vue</code>注册了drag相关事件  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div</span><br><span class="line">    class=&quot;el-upload-dragger&quot;</span><br><span class="line">    :class=&quot;&#123;</span><br><span class="line">      &#x27;is-dragover&#x27;: dragover</span><br><span class="line">    &#125;&quot;</span><br><span class="line">    @drop.prevent=&quot;onDrop&quot;</span><br><span class="line">    @dragover.prevent=&quot;onDragover&quot;</span><br><span class="line">    @dragleave.prevent=&quot;dragover = false&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><code>onDrop</code>内<code>this.$emit(&#39;file&#39;, e.dataTransfer.files)</code>给上级的upload.vue处理<br>参考 <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer"><code>DataTransfer.files</code></a>  </p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>挨个文件调用<code>this.post()</code>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// upload.vue</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">post</span>(<span class="params">rawFile</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; uid &#125; = rawFile;</span><br><span class="line">  <span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">headers</span>: <span class="built_in">this</span>.headers,</span><br><span class="line">    <span class="attr">withCredentials</span>: <span class="built_in">this</span>.withCredentials,</span><br><span class="line">    <span class="attr">file</span>: rawFile,</span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">this</span>.data,</span><br><span class="line">    <span class="attr">filename</span>: <span class="built_in">this</span>.name,</span><br><span class="line">    <span class="attr">action</span>: <span class="built_in">this</span>.action,</span><br><span class="line">    <span class="attr">onProgress</span>: <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.onProgress(e, rawFile);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onSuccess</span>: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.onSuccess(res, rawFile);</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">this</span>.reqs[uid];</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onError</span>: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.onError(err, rawFile);</span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">this</span>.reqs[uid];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">const</span> req = <span class="built_in">this</span>.httpRequest(options);</span><br><span class="line">  <span class="built_in">this</span>.reqs[uid] = req;</span><br><span class="line">  <span class="keyword">if</span> (req &amp;&amp; req.then) &#123;</span><br><span class="line">    req.then(options.onSuccess, options.onError);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p><code>httpRequest</code>方法的默认实现在同文件夹的<code>ajax.js</code>里, 也可由<code>&lt;el-upload&gt;</code>的<code>http-request</code>属性传入<br>(element-ui官方文档没写清楚<code>http-request</code>的参数)<br><img data-src="/http-request.png" alt="http-request">  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ajax.js</span></span><br><span class="line"><span class="comment">// httpRequest的默认实现是以下函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">option</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">  formData.append(option.filename, option.file, option.file.name);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  <span class="keyword">if</span> (xhr.upload) &#123;</span><br><span class="line">    xhr.upload.onprogress = <span class="function"><span class="keyword">function</span> <span class="title">progress</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (e.total &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        e.percent = e.loaded / e.total * <span class="number">100</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      option.onProgress(e);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.onerror = <span class="function"><span class="keyword">function</span> <span class="title">error</span>(<span class="params">e</span>) </span>&#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line">  xhr.onload = <span class="function"><span class="keyword">function</span> <span class="title">onload</span>(<span class="params"></span>) </span>&#123; <span class="comment">/* ... */</span> &#125;;</span><br><span class="line">  xhr.open(<span class="string">&#x27;post&#x27;</span>, option.action <span class="comment">/* 就是el-upload里传下来的action */</span>, <span class="literal">true</span>);</span><br><span class="line">  xhr.withCredentials = <span class="literal">true</span>;</span><br><span class="line">  xhr.setRequestHeader( <span class="comment">/* ... */</span> );</span><br><span class="line">  xhr.send(formData);</span><br><span class="line">  <span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XMLHttpRequest.upload用法见<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/upload">文档</a>  </p><h2 id="UploadList组件"><a href="#UploadList组件" class="headerlink" title="UploadList组件"></a>UploadList组件</h2><p>封装了三种不同显示方式</p><p>list-type: “text”<br><img data-src="/list-type-text.png" alt="list-type: &quot;text&quot;"></p><p>list-type: “picture”<br><img data-src="/list-type-picture.png" alt="list-type: &quot;picture&quot;"></p><p>list-type: “picture-card”<br><img data-src="/list-type-picture-card.png" alt="list-type: &quot;picture-card&quot;"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;分析el-upload&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://blog.cearl.cc/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="element-ui" scheme="https://blog.cearl.cc/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>分析el-select</title>
    <link href="https://blog.cearl.cc/posts/10/"/>
    <id>https://blog.cearl.cc/posts/10/</id>
    <published>2019-09-17T16:00:00.000Z</published>
    <updated>2022-02-19T14:42:39.166Z</updated>
    
    <content type="html"><![CDATA[<p>分析el-select</p><span id="more"></span><p>  “name”: “element-ui”,<br>  “version”: “2.10.1”,  </p><p>组件文档: <a href="https://element.eleme.cn/#/en-US/component/select">文档</a><br>源码在<code>packages/select/</code>下: <a href="https://github.com/ElemeFE/element/tree/dev/packages/select">链接</a>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|-- select</span><br><span class="line">    |-- index.js</span><br><span class="line">    |-- src</span><br><span class="line">        |-- navigation-mixin.js</span><br><span class="line">        |-- option-group.vue</span><br><span class="line">        |-- option.vue</span><br><span class="line">        |-- select-dropdown.vue</span><br><span class="line">        |-- select.vue</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="主要文件"><a href="#主要文件" class="headerlink" title="主要文件"></a>主要文件</h2><p><a href="https://github.com/ElemeFE/element/blob/dev/packages/select/src/select.vue"><strong>packages\select\src\select.vue</strong></a><br>select主体  </p><p><a href="https://github.com/ElemeFE/element/blob/dev/packages/select/src/select-dropdown.vue"><strong>packages\select\src\select-dropdown.vue</strong></a><br>select选项弹出框<br>这个组件主要只处理placement(弹出框位置)&#x2F;popperOptions&#x2F;visibleArrow&#x2F;appendToBody等配置  </p><p><a href="https://github.com/ElemeFE/element/blob/dev/src/utils/vue-popper.js"><strong>src\utils\vue-popper.js</strong></a><br>封装了createPopper&#x2F;updatePopper&#x2F;destroyPopper等<br>作为mixin在select-dropdown&#x2F;picker-dropdown&#x2F;cascader等多处被使用  </p><p><a href="https://github.com/ElemeFE/element/blob/dev/src/utils/popper.js"><strong>src\utils\popper.js</strong></a><br>弹出框的各种基础方法  </p><h2 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h2><p>需要显示弹出框时, select.vue的visible()函数内broadcast ‘updatePopper’事件, 逐层下传<br>select.vue中把el-input标记为reference, popper.js中的_getOffsets根据reference计算popper位置.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// popper.js</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get offsets to the popper</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@memberof <span class="variable">Popper</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@access <span class="variable">private</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Element&#125;</span> <span class="variable">popper</span></span> - the popper element</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="type">&#123;Element&#125;</span> <span class="variable">reference</span></span> - the reference element (the popper will be relative to this)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns <span class="type">&#123;Object&#125;</span> </span>An object containing the offsets which will be applied to the popper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Popper.prototype._getOffsets = <span class="function"><span class="keyword">function</span>(<span class="params">popper, reference, placement</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// vue-popper.js</span></span><br><span class="line">    <span class="function"><span class="title">createPopper</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> options = <span class="built_in">this</span>.popperOptions;</span><br><span class="line">      <span class="keyword">const</span> popper = <span class="built_in">this</span>.popperElm = <span class="built_in">this</span>.popperElm || <span class="built_in">this</span>.popper || <span class="built_in">this</span>.$refs.popper;</span><br><span class="line">      <span class="keyword">let</span> reference = <span class="built_in">this</span>.referenceElm = <span class="built_in">this</span>.referenceElm || <span class="built_in">this</span>.reference || <span class="built_in">this</span>.$refs.reference;  </span><br><span class="line">      <span class="built_in">this</span>.popperJS = <span class="keyword">new</span> PopperJS(reference, popper, options);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// select-dropdown.vue</span></span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.referenceElm = <span class="built_in">this</span>.$parent.$refs.reference.$el;</span><br><span class="line">      <span class="built_in">this</span>.$parent.popperElm = <span class="built_in">this</span>.popperElm = <span class="built_in">this</span>.$el;</span><br><span class="line">      <span class="built_in">this</span>.$on(<span class="string">&#x27;updatePopper&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.$parent.visible) <span class="built_in">this</span>.updatePopper();</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="built_in">this</span>.$on(<span class="string">&#x27;destroyPopper&#x27;</span>, <span class="built_in">this</span>.destroyPopper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// select.vue</span></span><br><span class="line">    &lt;el-input ref=<span class="string">&quot;reference&quot;</span> &gt;&lt;/el-input&gt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">visible</span>(<span class="params">val</span>)</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="built_in">this</span>.broadcast(<span class="string">&#x27;ElSelectDropdown&#x27;</span>, <span class="string">&#x27;updatePopper&#x27;</span>);</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;分析el-select&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://blog.cearl.cc/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="element-ui" scheme="https://blog.cearl.cc/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>抓取碧蓝航线WIKI角色图片</title>
    <link href="https://blog.cearl.cc/posts/9/"/>
    <id>https://blog.cearl.cc/posts/9/</id>
    <published>2018-07-07T15:55:32.000Z</published>
    <updated>2022-02-19T14:42:39.166Z</updated>
    
    <content type="html"><![CDATA[<p>试玩一下JS爬虫<br>从碧蓝WIKI抓取角色图片<br>用到<code>superagent</code>, <code>cheerio</code>, <code>request</code>等库</p><span id="more"></span><p>先上代码地址 : <a href="https://github.com/chess99/blhx-spider">Github</a></p><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><h2 id="步骤1-获取角色首页"><a href="#步骤1-获取角色首页" class="headerlink" title="步骤1 : 获取角色首页"></a>步骤1 : 获取角色首页</h2><p><a href="http://wiki.joyme.com/blhx/%E8%88%B0%E5%A8%98">舰娘首页</a>有全部角色的列表</p><p>用<code>superagent</code>获取该页</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">superagent</span><br><span class="line">  .get(jianniangHomeUrl)</span><br><span class="line">  .end(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p><code>superagent</code>用法参照<a href="https://visionmedia.github.io/superagent/">文档</a></p><h2 id="步骤2-分析角色首页"><a href="#步骤2-分析角色首页" class="headerlink" title="步骤2 : 分析角色首页"></a>步骤2 : 分析角色首页</h2><p>在一个<code>id=&quot;FlourPackage&quot;</code>的<code>div</code>下面,<br>有一系列<code>class=&quot;Flour&quot;</code>的<code>div</code>, 分别各为一个角色的小图框,<br>再下面, <code>a</code>标签中有角色名和链接</p><p><img data-src="/FlourPackage.png" alt="FlourPackage.png"></p><p>用<code>cheerio</code>取出这些信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $ = cheerio.load(data)  <span class="comment">// 此处data为上一步读取回来的整个页面</span></span><br><span class="line"><span class="keyword">let</span> characterList = []</span><br><span class="line">$(<span class="string">&#x27;#FlourPackage&#x27;</span>).find(<span class="string">&#x27;.Flour&#x27;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> title = $(<span class="built_in">this</span>).find(<span class="string">&#x27;a&#x27;</span>).attr(<span class="string">&#x27;title&#x27;</span>)  <span class="comment">// 角色名</span></span><br><span class="line">  <span class="keyword">let</span> href = $(<span class="built_in">this</span>).find(<span class="string">&#x27;a&#x27;</span>).attr(<span class="string">&#x27;href&#x27;</span>) <span class="comment">// 角色链接</span></span><br><span class="line">  characterList.push([title, href])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>cheerio</code>用法参照<a href="https://visionmedia.github.io/superagent/">文档</a>, 基本和JQuery一致</p><h2 id="步骤3-获取各角色图片链接"><a href="#步骤3-获取各角色图片链接" class="headerlink" title="步骤3 : 获取各角色图片链接"></a>步骤3 : 获取各角色图片链接</h2><p>一个角色页的<a href="http://wiki.joyme.com/blhx/%E6%AC%A7%E6%A0%B9%E4%BA%B2%E7%8E%8B">栗子</a></p><p>图片链接在各类似如下的元素里</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;欧根亲王立绘.jpg&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://p9.qhimg.com/dr/350__/t012066ae5fe5a20298.jpg&quot;</span> <span class="attr">...</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>图片链接无明显规律, 参照步骤1的方法, 获取每个角色页, 然后用<code>cheerio</code>取出图片链接</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imgLinks = []</span><br><span class="line"><span class="keyword">let</span> imgTypes = [<span class="string">&#x27;立绘&#x27;</span>, <span class="string">&#x27;换装&#x27;</span>, <span class="string">&#x27;换装2&#x27;</span>, <span class="string">&#x27;改造&#x27;</span>, <span class="string">&#x27;誓约&#x27;</span>]</span><br><span class="line">imgTypes.forEach(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> selector = <span class="string">`img[alt*=&quot;<span class="subst">$&#123;type&#125;</span>&quot;]`</span></span><br><span class="line">  <span class="keyword">let</span> element = $(selector)</span><br><span class="line">  <span class="keyword">let</span> src = element.attr(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> imgName = element.attr(<span class="string">&#x27;alt&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (imgName &amp;&amp; src) &#123;</span><br><span class="line">    imgLinks.push([imgName, src])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里用了正则形式的属性选择器<code>img[alt*=&quot;xxxx&quot;]</code>, 选出 有alt属性且alt属性含有xxxx子串的img标签<br>参考<a href="https://www.zhangxinxu.com/wordpress/2016/08/regular-expression-in-css-selector/">CSS选择器中的正则表达式</a></p><h2 id="步骤4-下载保存图片"><a href="#步骤4-下载保存图片" class="headerlink" title="步骤4 : 下载保存图片"></a>步骤4 : 下载保存图片</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">request(url)</span><br><span class="line">  .on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    callback(<span class="literal">null</span>, err)</span><br><span class="line">  &#125;)</span><br><span class="line">  .pipe(fs.createWriteStream(savePath))</span><br><span class="line">  .on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    callback(<span class="literal">null</span>, url);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p><code>request</code>用法参照<a href="https://github.com/request/request">文档</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>使用了<code>async</code>控制并发数<br><code>async</code>用法参照<a href="https://caolan.github.io/async/docs.html">文档</a></p><h1 id="后续优化"><a href="#后续优化" class="headerlink" title="后续优化"></a>后续优化</h1><p>添加抓取间隔等 ( 现在连续抓取后会被暂时屏蔽 )</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>然而这些图片图像质量并不好..</p><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://visionmedia.github.io/superagent/">superagent</a><br><a href="https://github.com/cheeriojs/cheerio">cheerio</a><br><a href="https://github.com/request/request">request</a><br><a href="https://caolan.github.io/async/docs.html">async</a><br><a href="http://nodejs.cn/api/fs.html#fs_fs_createwritestream_path_options">fs.createWriteStream</a><br><a href="https://www.zhangxinxu.com/wordpress/2016/08/regular-expression-in-css-selector/">CSS选择器中的正则表达式</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;试玩一下JS爬虫&lt;br&gt;从碧蓝WIKI抓取角色图片&lt;br&gt;用到&lt;code&gt;superagent&lt;/code&gt;, &lt;code&gt;cheerio&lt;/code&gt;, &lt;code&gt;request&lt;/code&gt;等库&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://blog.cearl.cc/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="爬虫" scheme="https://blog.cearl.cc/tags/%E7%88%AC%E8%99%AB/"/>
    
    <category term="Node" scheme="https://blog.cearl.cc/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>CRLF行尾问题</title>
    <link href="https://blog.cearl.cc/posts/8/"/>
    <id>https://blog.cearl.cc/posts/8/</id>
    <published>2018-06-27T02:58:51.000Z</published>
    <updated>2022-02-19T14:42:39.166Z</updated>
    
    <content type="html"><![CDATA[<p>混用行尾的话, 在Linux中, CRLF行尾会导致脚本执行异常<br>整理了一些解决及预防办法</p><span id="more"></span><h1 id="知识回顾"><a href="#知识回顾" class="headerlink" title="知识回顾"></a>知识回顾</h1><p>CR, 回车, Carriage-Return, ASCII 13, \r<br>LF, 换行, Line-Feed ,      ASCII 10, \n</p><p>Windows下默认<code>CRLF</code>,<br>Linux下默认<code>LF</code>, 多余的<code>\r</code>会显示为<code>^M</code></p><h1 id="Vim中"><a href="#Vim中" class="headerlink" title="Vim中"></a>Vim中</h1><h2 id="关于-M的显示"><a href="#关于-M的显示" class="headerlink" title="关于^M的显示"></a>关于^M的显示</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 刷新显示, 不显示^M</span></span><br><span class="line">:e ++ff=dos</span><br></pre></td></tr></table></figure><p>或者在<code>.vimrc</code>中:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 让vim可以自动识别DOS和UNIX文本文件格式, 使用vim打开DOS文本文件就不会显示^M字符了</span></span><br><span class="line">setfileformats=dos,unix</span><br></pre></td></tr></table></figure><p>参考: <a href="http://vim.wikia.com/wiki/File_format">File format</a></p><h2 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h2><p>几种方法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 替换掉\r</span></span><br><span class="line">:%s/\r//g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文件保存为`LF`行尾格式</span></span><br><span class="line">:w ++ff=unix</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `fileformat`可以写成`ff`</span></span><br><span class="line">:<span class="built_in">set</span> fileformat=unix</span><br><span class="line">:<span class="built_in">set</span> fileformat=dos</span><br></pre></td></tr></table></figure><p>另附, <a href="https://blog.csdn.net/chenster/article/details/53307707">Vim 中读写特殊字符</a><br>通过 <code>:help digraph-table</code> 可看到所有Vim中可输入的特殊字符</p><h1 id="批量转换"><a href="#批量转换" class="headerlink" title="批量转换"></a>批量转换</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find your/path/ -<span class="built_in">type</span> f -<span class="built_in">exec</span> dos2unix &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>路径自行修改..</p><p>参考: <a href="https://www.cnblogs.com/Jerryshome/archive/2012/04/24/2467612.html">dos2unix整个目录</a></p><h1 id="Git自动转换"><a href="#Git自动转换" class="headerlink" title="Git自动转换"></a>Git自动转换</h1><p>推荐配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.autocrlf input</span><br></pre></td></tr></table></figure><p>把<code>core.autocrlf</code>设置成<code>input</code>来告诉 Git 在提交时把CRLF转换成LF，签出时不转换<br>其他选项参见 <a href="https://git-scm.com/book/zh/v1/%E8%87%AA%E5%AE%9A%E4%B9%89-Git-%E9%85%8D%E7%BD%AE-Git#%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8E%E7%A9%BA%E7%99%BD">文档</a></p><h1 id="VSCode默认行尾配置"><a href="#VSCode默认行尾配置" class="headerlink" title="VSCode默认行尾配置"></a>VSCode默认行尾配置</h1><p><code>Ctrl + Shift + P</code>, 搜索’首选项’或者’preferences’<br>在<code>USER SETTINGS</code>里增加:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;files.eol&quot;</span>: <span class="string">&quot;\n&quot;</span>,</span><br></pre></td></tr></table></figure><p>说明:</p><blockquote><p>The default end of line character. Use \n for LF and \r\n for CRLF.</p></blockquote><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="使用sed"><a href="#使用sed" class="headerlink" title="使用sed"></a>使用sed</h2><p>DOS转UNIX：<code>sed &#39;s/.$//&quot;dosfile.txt &gt; unixfile.txt</code><br>UNIX转DOS：<code>sed &quot;s/$/\r/&quot;unixfile.txt &gt; dosfile.txt</code></p><h2 id="使用Perl"><a href="#使用Perl" class="headerlink" title="使用Perl"></a>使用Perl</h2><p>DOS转UNIX：<code>perl -p -e &#39;s/\r$//&quot;&lt; dosfile.txt &gt; unixfile.txt</code><br>UNIX转DOS：<code>perl -p -e &#39;s/$/\r/&quot;&lt; unixfile.txt &gt; dosfile.txt</code></p><h2 id="使用awk"><a href="#使用awk" class="headerlink" title="使用awk"></a>使用awk</h2><p>DOS转UNIX：<code>awk &#39;&#123;sub(&quot;\r$&quot;,&quot;&quot;, $0);print $0&#125;&quot; dosfile.txt &gt; unixfile.txt</code><br>UNIX转DOS：<code>awk &#39;&#123;sub(&quot;$&quot;,&quot;\r&quot;, $0);print $0&#125;&quot; dosfile.txt &gt; unixfile.txt</code></p><p>参考 <a href="https://blog.csdn.net/fan_hai_ping/article/details/8352087">DOS和UNIX文本文件之间相互转换的方法</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;混用行尾的话, 在Linux中, CRLF行尾会导致脚本执行异常&lt;br&gt;整理了一些解决及预防办法&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://blog.cearl.cc/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Shell" scheme="https://blog.cearl.cc/tags/Shell/"/>
    
    <category term="Vim" scheme="https://blog.cearl.cc/tags/Vim/"/>
    
    <category term="CRLF" scheme="https://blog.cearl.cc/tags/CRLF/"/>
    
    <category term="Git" scheme="https://blog.cearl.cc/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript中this的指向</title>
    <link href="https://blog.cearl.cc/posts/7/"/>
    <id>https://blog.cearl.cc/posts/7/</id>
    <published>2018-06-25T04:34:59.000Z</published>
    <updated>2022-02-19T14:42:39.166Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下<code>this</code>用法, 基本是抄了一遍MDN..</p><p>普通函数: 执行上下文, 严格模式下默认不指向全局对象<br>箭头函数: 词法上下文</p><span id="more"></span><h1 id="全局上下文"><a href="#全局上下文" class="headerlink" title="全局上下文"></a>全局上下文</h1><p>在全局执行上下文中（在任何函数体外部）<br><code>this</code>总是指代全局对象 (包括严格模式)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在浏览器中，全局对象是<code>window</code><br>在Node中, 是<code>global</code></p><h1 id="普通函数"><a href="#普通函数" class="headerlink" title="普通函数"></a>普通函数</h1><h2 id="简单调用"><a href="#简单调用" class="headerlink" title="简单调用"></a>简单调用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">  &#x27;use strict&#x27;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f1()  <span class="comment">// window 或 global</span></span><br><span class="line">f2()  <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">window</span>.f2() <span class="comment">// window</span></span><br><span class="line"><span class="built_in">global</span>.f2() <span class="comment">// TypeError: global.f2 is not a function</span></span><br></pre></td></tr></table></figure><p><code>this</code>保持他进入执行上下文时的值,</p><p>如果 <code>this</code> 没有被执行上下文（execution context）定义，那它将保持为 :<br>严格模式  : <code>undefined</code><br>非严格模式: 全局对象</p><h2 id="对象的方法-x2F-原型链-x2F-getter-x2F-setter"><a href="#对象的方法-x2F-原型链-x2F-getter-x2F-setter" class="headerlink" title="对象的方法 &#x2F; 原型链 &#x2F; getter &#x2F; setter"></a>对象的方法 &#x2F; 原型链 &#x2F; getter &#x2F; setter</h2><p>都是指向的是调用这个方法的对象</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><p>当一个函数用作构造函数时（使用<code>new</code>关键字），它的<code>this</code>被绑定到正在构造的新对象。</p><p><em>构造器返回的默认值是<code>this</code>所指的那个对象，</em><br><em>可以手动返回其他的对象（如果返回值不是一个对象，则返回this对象）</em></p><h2 id="DOM事件处理函数"><a href="#DOM事件处理函数" class="headerlink" title="DOM事件处理函数"></a>DOM事件处理函数</h2><p>指向触发事件的元素<br>（一些浏览器在使用非addEventListener的函数动态添加监听函数时不遵守这个约定）</p><h2 id="内联事件处理函数"><a href="#内联事件处理函数" class="headerlink" title="内联事件处理函数"></a>内联事件处理函数</h2><p>当代码被内联on-event 处理函数调用时，它的this指向监听器所在的DOM元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(this.tagName.toLowerCase());&quot;</span>&gt;</span></span><br><span class="line">  Show this</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的 alert 会显示button。注意只有外层代码中的this是这样设置的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert((function()&#123;return this&#125;)());&quot;</span>&gt;</span></span><br><span class="line">  Show inner this</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这种情况下，没有设置内部函数的this，所以它指向 global&#x2F;window 对象（即非严格模式下调用的函数未设置this时指向的默认对象）。</p><h2 id="bind-x2F-call-x2F-apply"><a href="#bind-x2F-call-x2F-apply" class="headerlink" title="bind &#x2F; call &#x2F; apply"></a>bind &#x2F; call &#x2F; apply</h2><p>将一个对象作为<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">call</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">apply</a>的第一个参数，<code>this</code>会被绑定到这个对象。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">f.bind(someObject)</a>会创建一个与f具有相同函数体和作用域的函数，但是在这个新函数中，<code>this</code>将永久地被绑定到了bind的第一个参数，无论这个函数是如何被调用的。</p><h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>在箭头函数中，<code>this</code>与封闭词法上下文的<code>this</code>保持一致。<br>( 函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象 )</p><p>在全局上下文中的箭头函数，<code>this</code>被设置为全局对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = (<span class="function">() =&gt;</span> <span class="built_in">this</span>);</span><br><span class="line">foo() <span class="comment">// 全局对象</span></span><br></pre></td></tr></table></figure><p><em>注意: 如果将this传递给call、bind、或者apply，它将被忽略</em></p><h1 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h1><h2 id="setInterval-x2F-setTimeout"><a href="#setInterval-x2F-setTimeout" class="headerlink" title="setInterval &#x2F; setTimeout"></a>setInterval &#x2F; setTimeout</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Obj</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.num = <span class="number">1</span>,</span><br><span class="line">    <span class="built_in">this</span>.getNum1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;getNum1&#x27;</span>, <span class="built_in">this</span>, <span class="built_in">this</span>.num)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">this</span>.getNum2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;getNum2&#x27;</span>, <span class="built_in">this</span>.num);</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> Obj;</span><br><span class="line">obj.getNum1(); <span class="comment">// 浏览器中0(this为window), Node中undefined(this为Timeout)</span></span><br><span class="line">obj.getNum2(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><code>setInterval</code>和<code>setTimeout</code>调用的代码运行在与所在函数完全分离的执行环境上</p><h2 id="单独调用对象方法"><a href="#单独调用对象方法" class="headerlink" title="单独调用对象方法"></a>单独调用对象方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">bar</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> fn = obj.bar(); <span class="comment">// obj</span></span><br><span class="line"><span class="keyword">var</span> fn2 = obj.bar</span><br><span class="line">fn2() <span class="comment">// 全局对象(fn2定义的上下文)</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/this">this - MDN</a><br><a href="https://www.cnblogs.com/zsqos/p/6188835.html">关于setInterval和setTImeout中的this指向问题</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;整理一下&lt;code&gt;this&lt;/code&gt;用法, 基本是抄了一遍MDN..&lt;/p&gt;
&lt;p&gt;普通函数: 执行上下文, 严格模式下默认不指向全局对象&lt;br&gt;箭头函数: 词法上下文&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://blog.cearl.cc/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://blog.cearl.cc/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>支持WSS</title>
    <link href="https://blog.cearl.cc/posts/6/"/>
    <id>https://blog.cearl.cc/posts/6/</id>
    <published>2018-06-14T01:58:14.000Z</published>
    <updated>2022-02-19T14:42:39.166Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>Let’s Encrypt</code>提供的免费证书,<br>基于<code>node.js</code>的<code>ws</code>模块</p><span id="more"></span><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="购买证书"><a href="#购买证书" class="headerlink" title="购买证书"></a>购买证书</h2><p>见 <a href="https://docs.iredmail.org/use.a.bought.ssl.certificate-zh_CN.html">使用购买的 SSL 证书</a><br>或者使用免费的证书: <a href="https://letsencrypt.org/">Let’s Encrypt</a> 的 <a href="https://www.sslforfree.com/">SSL For Free</a> . (只有三个月有效期, 需要定期更新)</p><h2 id="合并ca-bundle-crt"><a href="#合并ca-bundle-crt" class="headerlink" title="合并ca_bundle.crt"></a>合并ca_bundle.crt</h2><p>ca_bundle.crt的作用见 <a href="http://nginx.org/en/docs/http/configuring_https_servers.html#chains">链接</a></p><p>这里直接合并进<code>certificate.crt</code>了<br>其他服务使用见相应的配置文档..</p><ul><li>推荐的存放路径</li></ul><p>在 RHEL&#x2F;CentOS 系统上：<code>server.crt</code> 和 <code>server.ca-bundle</code> 上传至 <code>/etc/pki/tls/certs/</code> ，<code>server.key</code> 上传至 <code>/etc/pki/tls/private/</code>。<br>在 Debian&#x2F;Ubuntu， FreeBSD 系统上： <code>server.crt</code> 和 <code>server.ca-bundle</code> 上传至 <code>/etc/ssl/certs/</code>， <code>server.key</code> 上传至<code>/etc/ssl/private/</code>。<br>在 OpenBSD 系统上：上传至 <code>/etc/ssl/</code>。</p><h2 id="创建wss服务"><a href="#创建wss服务" class="headerlink" title="创建wss服务"></a>创建wss服务</h2><p>  这里使用<code>node.js</code>的<code>ws</code>模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">  <span class="attr">key</span>: fs.readFileSync(keypath),</span><br><span class="line">  <span class="attr">cert</span>: fs.readFileSync(certpath),</span><br><span class="line">  <span class="attr">passphrase</span>:<span class="string">&#x27;1234&#x27;</span><span class="comment">//如果秘钥文件有密码的话，用这个属性设置密码</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> server = https.createServer(options, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log((<span class="keyword">new</span> <span class="built_in">Date</span>()) + <span class="string">&#x27; Received HTTP(S) request for &#x27;</span> + req.url);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//要是单纯的https连接的话返回403</span></span><br><span class="line">  res.writeHead(<span class="number">403</span>);</span><br><span class="line">  res.end(<span class="string">&quot;This is a  WebSockets server!\n&quot;</span>);</span><br><span class="line">&#125;).listen(<span class="number">44301</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//把创建好的https服务器丢进websocket的创建函数里，ws会用这个服务器来创建wss服务</span></span><br><span class="line"><span class="comment">//同样，如果丢进去的是个http服务的话那么创建出来的还是无加密的ws服务</span></span><br><span class="line"><span class="keyword">var</span> wss = <span class="keyword">new</span> ws.Server(&#123; <span class="attr">server</span>: server &#125;);</span><br><span class="line"></span><br><span class="line">wss.on(<span class="string">&#x27;connection&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">wsConnect</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;connection&#x27;</span>)</span><br><span class="line">  wsConnect.on(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;message&#x27;</span>, message);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="http://www.codeceo.com/article/add-https-to-website.html">30分钟让网站支持HTTPS</a><br><a href="http://nginx.org/en/docs/http/configuring_https_servers.html">nginx - Configuring HTTPS servers</a><br><a href="https://blog.csdn.net/xiuzhentianting/article/details/56012922">用WS模块创建加密的WSS服务</a><br><a href="https://github.com/websockets/ws#external-https-server">ws - External HTTP&#x2F;S server</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用&lt;code&gt;Let’s Encrypt&lt;/code&gt;提供的免费证书,&lt;br&gt;基于&lt;code&gt;node.js&lt;/code&gt;的&lt;code&gt;ws&lt;/code&gt;模块&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://blog.cearl.cc/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="SSL" scheme="https://blog.cearl.cc/tags/SSL/"/>
    
    <category term="HTTPS" scheme="https://blog.cearl.cc/tags/HTTPS/"/>
    
    <category term="WSS" scheme="https://blog.cearl.cc/tags/WSS/"/>
    
  </entry>
  
  <entry>
    <title>DOM元素坐标及事件坐标</title>
    <link href="https://blog.cearl.cc/posts/5/"/>
    <id>https://blog.cearl.cc/posts/5/</id>
    <published>2018-06-11T11:56:00.000Z</published>
    <updated>2022-02-19T14:42:39.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM元素坐标"><a href="#DOM元素坐标" class="headerlink" title="DOM元素坐标"></a>DOM元素坐标</h1><ol><li><code>clientHeight</code> 和 <code>clientWidth</code> 用于描述元素内尺寸，是指 元素内容+内边距 大小，不包括边框（IE下实际包括）、外边距、滚动条部分</li><li><code>offsetHeight</code> 和 <code>offsetWidth</code> 用于描述元素外尺寸，是指 元素内容+内边距+边框，不包括外边距和滚动条部分</li><li><code>clientTop</code> 和 <code>clientLeft</code> 返回内边距的边缘和边框的外边缘之间的水平和垂直距离，也就是左，上边框宽度</li><li><code>offsetTop</code> 和 <code>offsetLeft</code> 表示该元素的左上角（边框外边缘）与已定位的父容器（offsetParent对象）左上角的距离</li><li><code>offsetParent</code> 对象是指元素最近的定位（relative,absolute）祖先元素，递归上溯，如果没有祖先元素是定位的话，会返回null</li></ol><h1 id="事件坐标"><a href="#事件坐标" class="headerlink" title="事件坐标"></a>事件坐标</h1><ul><li>pageX&#x2F;Y：从<code>&lt;html&gt;</code>原点到事件触发点的CSS的 pixels</li><li>clientX&#x2F;Y：从viewport原点（浏览器窗口）到事件触发点的CSS的 pixels</li><li>screenX&#x2F;Y：从用户显示器窗口原点到事件触发点的设备 的 pixels。</li></ul><span id="more"></span><h1 id="获取网页元素的绝对位置"><a href="#获取网页元素的绝对位置" class="headerlink" title="获取网页元素的绝对位置"></a>获取网页元素的绝对位置</h1><ul><li>方法1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOffset</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> offset = &#123;</span><br><span class="line">    <span class="attr">top</span>: element.offsetTop,</span><br><span class="line">    <span class="attr">left</span>: element.offsetLeft</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> parentElement = element.offsetParent;</span><br><span class="line">  <span class="keyword">while</span> (parentElement) &#123;</span><br><span class="line">    offset.top += element.offsetParent.offsetTop;</span><br><span class="line">    offset.left += element.offsetParent.offsetLeft;</span><br><span class="line">    parentElement = parentElement.offsetParent;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> offset;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法2</li></ul><p>使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element/getBoundingClientRect">getBoundingClientRect()</a><br>详见 <a href="http://www.ruanyifeng.com/blog/2009/09/find_element_s_position_using_javascript.html">用Javascript获取页面元素的位置 -&gt; 六、获取元素位置的快速方法</a> </p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://www.w3cplus.com/css/viewports.html">viewports剖析</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;DOM元素坐标&quot;&gt;&lt;a href=&quot;#DOM元素坐标&quot; class=&quot;headerlink&quot; title=&quot;DOM元素坐标&quot;&gt;&lt;/a&gt;DOM元素坐标&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;clientHeight&lt;/code&gt; 和 &lt;code&gt;clientWidth&lt;/code&gt; 用于描述元素内尺寸，是指 元素内容+内边距 大小，不包括边框（IE下实际包括）、外边距、滚动条部分&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offsetHeight&lt;/code&gt; 和 &lt;code&gt;offsetWidth&lt;/code&gt; 用于描述元素外尺寸，是指 元素内容+内边距+边框，不包括外边距和滚动条部分&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clientTop&lt;/code&gt; 和 &lt;code&gt;clientLeft&lt;/code&gt; 返回内边距的边缘和边框的外边缘之间的水平和垂直距离，也就是左，上边框宽度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offsetTop&lt;/code&gt; 和 &lt;code&gt;offsetLeft&lt;/code&gt; 表示该元素的左上角（边框外边缘）与已定位的父容器（offsetParent对象）左上角的距离&lt;/li&gt;
&lt;li&gt;&lt;code&gt;offsetParent&lt;/code&gt; 对象是指元素最近的定位（relative,absolute）祖先元素，递归上溯，如果没有祖先元素是定位的话，会返回null&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;事件坐标&quot;&gt;&lt;a href=&quot;#事件坐标&quot; class=&quot;headerlink&quot; title=&quot;事件坐标&quot;&gt;&lt;/a&gt;事件坐标&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;pageX&amp;#x2F;Y：从&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;原点到事件触发点的CSS的 pixels&lt;/li&gt;
&lt;li&gt;clientX&amp;#x2F;Y：从viewport原点（浏览器窗口）到事件触发点的CSS的 pixels&lt;/li&gt;
&lt;li&gt;screenX&amp;#x2F;Y：从用户显示器窗口原点到事件触发点的设备 的 pixels。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://blog.cearl.cc/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://blog.cearl.cc/tags/JavaScript/"/>
    
    <category term="HTML" scheme="https://blog.cearl.cc/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客插入图片</title>
    <link href="https://blog.cearl.cc/posts/5/"/>
    <id>https://blog.cearl.cc/posts/5/</id>
    <published>2018-06-10T16:36:44.000Z</published>
    <updated>2022-02-19T14:42:39.158Z</updated>
    
    <content type="html"><![CDATA[<img data-src="/posts/5/%E5%9B%9B%E6%9C%88%E3%81%AF%E5%90%9B%E3%81%AE%E5%98%98.png" class="" title="This is an example image"><span id="more"></span><h1 id="官方方法"><a href="#官方方法" class="headerlink" title="官方方法"></a>官方方法</h1><h2 id="1-source-images-文件夹"><a href="#1-source-images-文件夹" class="headerlink" title="1.source/images 文件夹"></a>1.<code>source/images</code> 文件夹</h2><p>若图片少, 放在 <code>source/images</code> 文件夹中。然后通过类似于 <code>![](/images/image.jpg)</code> 的方法访问它们。  </p><p>通过常规的 markdown 语法和相对路径来引用图片和其它资源可能会导致它们在存档页或者主页上显示不正确。</p><h2 id="2-文章资源文件夹"><a href="#2-文章资源文件夹" class="headerlink" title="2.文章资源文件夹"></a>2.文章资源文件夹</h2><p>打开资源文件管理功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 站点_config.yml中</span></span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>Hexo将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个与<code>title</code>同名的文件夹。<br>引用图片时, 使用下列的标签插件而不是 markdown 语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure><p>参考 <a href="https://hexo.io/zh-cn/docs/asset-folders.html">官方文档</a></p><h1 id="使用图床"><a href="#使用图床" class="headerlink" title="使用图床"></a>使用图床</h1><p>使用<code>MWeb</code>, 一次编辑, 多平台发布  </p><p>详见文章:<br><a href="https://zhuanlan.zhihu.com/p/24426967">一个码字工作者的正确书写发文姿势</a></p>]]></content>
    
    
    <summary type="html">&lt;img data-src=&quot;/posts/5/%E5%9B%9B%E6%9C%88%E3%81%AF%E5%90%9B%E3%81%AE%E5%98%98.png&quot; class=&quot;&quot; title=&quot;This is an example image&quot;&gt;</summary>
    
    
    
    <category term="小折腾" scheme="https://blog.cearl.cc/categories/%E5%B0%8F%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Hexo" scheme="https://blog.cearl.cc/tags/Hexo/"/>
    
    <category term="NexT" scheme="https://blog.cearl.cc/tags/NexT/"/>
    
    <category term="github pages" scheme="https://blog.cearl.cc/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客站内链接</title>
    <link href="https://blog.cearl.cc/posts/4/"/>
    <id>https://blog.cearl.cc/posts/4/</id>
    <published>2018-06-10T16:36:43.000Z</published>
    <updated>2022-02-19T14:42:39.158Z</updated>
    
    <content type="html"><![CDATA[<pre><code>&#123;% post_link 文章标题 链接名称 %&#125;</code></pre><span id="more"></span><h1 id="站内文章链接"><a href="#站内文章链接" class="headerlink" title="站内文章链接"></a>站内文章链接</h1><pre><code>&#123;% post_link 文章标题 链接名称 %&#125;</code></pre><ul><li>如果文章不存在，这段代码将会被直接忽略。</li><li><em>链接名称</em>如果置空，则自动提取文章的标题。</li></ul><h2 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h2><p>站内相关文章链接:</p><a href="#">Post not found: Hexo博客搭建</a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_link Hexo博客搭建 %&#125;</span><br></pre></td></tr></table></figure><h1 id="锚点跳转"><a href="#锚点跳转" class="headerlink" title="锚点跳转"></a>锚点跳转</h1><p>在文章A中制作锚点  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">&quot;Anchor&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在文章B中插入跳转</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[文章A](2018/06/11/articleA<span class="comment">#Anchor)</span></span><br></pre></td></tr></table></figure><p>缺点: 硬编码了YYYY&#x2F;MM&#x2F;DD<br>一种解决方法: 修改<code>permalink: :year/:month/:day/:title/</code>为<code>permalink: :title/</code></p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://github.com/hexojs/hexo/issues/1709">hexo #1709</a><br><a href="https://github.com/iissnan/hexo-theme-next/issues/978">hexo-theme-next #978</a><br><a href="https://hexo.io/zh-cn/docs/tag-plugins.html#%E5%BC%95%E7%94%A8%E6%96%87%E7%AB%A0">hexo标签插件</a>  </p>]]></content>
    
    
    <summary type="html">&lt;pre&gt;&lt;code&gt;&amp;#123;% post_link 文章标题 链接名称 %&amp;#125;
&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="小折腾" scheme="https://blog.cearl.cc/categories/%E5%B0%8F%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Hexo" scheme="https://blog.cearl.cc/tags/Hexo/"/>
    
    <category term="NexT" scheme="https://blog.cearl.cc/tags/NexT/"/>
    
    <category term="github pages" scheme="https://blog.cearl.cc/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title>使用相对路径发布vue-cli项目</title>
    <link href="https://blog.cearl.cc/posts/3/"/>
    <id>https://blog.cearl.cc/posts/3/</id>
    <published>2018-06-06T11:28:19.000Z</published>
    <updated>2022-02-19T14:42:39.158Z</updated>
    
    <content type="html"><![CDATA[<p>项目根目录添加<code>vue.config.js</code>, 编辑<code>baseUrl</code></p><span id="more"></span><h1 id="gt-v3-0-0"><a href="#gt-v3-0-0" class="headerlink" title="&gt; v3.0.0"></a>&gt; v3.0.0</h1><p>项目根目录添加<code>vue.config.js</code>, 编辑<code>baseUrl</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// Project deployment base</span></span><br><span class="line">  <span class="comment">// By default we assume your app will be deployed at the root of a domain,</span></span><br><span class="line">  <span class="comment">// e.g. https://www.my-app.com/</span></span><br><span class="line">  <span class="comment">// If your app is deployed at a sub-path, you will need to specify that</span></span><br><span class="line">  <span class="comment">// sub-path here. For example, if your app is deployed at</span></span><br><span class="line">  <span class="comment">// https://www.foobar.com/my-app/</span></span><br><span class="line">  <span class="comment">// then change this to &#x27;/my-app/&#x27;</span></span><br><span class="line">  <span class="attr">baseUrl</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// baseUrl, but for the dev server.</span></span><br><span class="line">  <span class="comment">// you&#x27;ll only need this if you need to serve your dev server under</span></span><br><span class="line">  <span class="comment">// a specific sub-path in order to work with your dev setup.</span></span><br><span class="line">  <span class="attr">devBaseUrl</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详见 : <a href="https://github.com/vuejs/vue-cli/blob/v3.0.0-beta.13/docs/config.md">文档</a>  </p><h1 id="lt-v3-0-0"><a href="#lt-v3-0-0" class="headerlink" title="&lt; v3.0.0"></a>&lt; v3.0.0</h1><ol><li>在<code>config/index.js</code>中，将<code>assetsPublicPath</code>修改为<code>./</code>  </li><li>在<code>build/utils.js</code>中，找到<code>ExtractTextPlugin.extract</code>，添加配置项<code>publicPath: &#39;../../&#39;</code></li></ol><p>参考:<br><a href="http://mirari.cc/2017/09/08/%E4%BD%BF%E7%94%A8%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%8F%91%E5%B8%83vue-cli%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%9D%91/">使用相对路径发布vue-cli项目的坑</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;项目根目录添加&lt;code&gt;vue.config.js&lt;/code&gt;, 编辑&lt;code&gt;baseUrl&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="大前端" scheme="https://blog.cearl.cc/categories/%E5%A4%A7%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://blog.cearl.cc/tags/Vue/"/>
    
    <category term="vue-cli" scheme="https://blog.cearl.cc/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="https://blog.cearl.cc/posts/2/"/>
    <id>https://blog.cearl.cc/posts/2/</id>
    <published>2018-05-31T12:16:14.000Z</published>
    <updated>2022-02-19T14:42:39.158Z</updated>
    
    <content type="html"><![CDATA[<p>使用Hexo搭建博客, 并部署到github pages  </p><span id="more"></span><h1 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h1><ul><li>安装各种依赖(git, nodejs, hexo…)</li></ul><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><ul><li>参照Hexo官网<a href="https://hexo.io/zh-cn/">(https://hexo.io/zh-cn/)</a>, 跟着文档配置一遍…</li></ul><p>配置文件为项目根目录的<code>_config.yml</code>  </p><p>可参考 <a href="https://github.com/chess99/blog/blob/master/_config.yml">我的配置</a><br>记得删除其中的各种key或者换成你自己的  </p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul><li>选择一个主题, 跟着文档再配置一遍…</li></ul><p>配置文件为<code>themes/your_theme/_config.yml</code>  </p><p>我用的是<code>NexT</code><a href="https://theme-next.iissnan.com/">(https://theme-next.iissnan.com/)</a><br>可参考 <a href="https://github.com/chess99/blog/blob/master/themes/next/_config.yml">我的配置</a>  </p><p>也可以选择其他喜欢主题  </p><p><em>ps : 若搜索服务选用的是<code>algolia</code>, 照<a href="https://theme-next.iissnan.com/third-party-services.html#algolia-search">官方文档</a>配置的不行, apiKey也要加上:</em>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">algolia:</span><br><span class="line">  applicationID: your appID</span><br><span class="line">  apiKey: your Search-Only API Key    <span class="comment"># 注意不是Admin API Key</span></span><br><span class="line">  indexName: your index name</span><br><span class="line">  chunkSize: 5000</span><br></pre></td></tr></table></figure><h2 id="偷懒"><a href="#偷懒" class="headerlink" title="偷懒"></a>偷懒</h2><p>clone一个自己喜欢的博客, 修改一下…</p><h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果本地已安装hexo</span></span><br><span class="line"><span class="comment"># 参考 https://hexo.io/zh-cn/docs/writing.html</span></span><br><span class="line"></span><br><span class="line">hexo n &lt;title&gt;   <span class="comment"># new, 创建名为title新文章</span></span><br><span class="line">hexo s           <span class="comment"># server, 写作时的本地预览</span></span><br></pre></td></tr></table></figure><p>或者, 手动创建<code>md</code>文件, 写好后提交到对应目录就行..</p><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h2><p>需要本地已安装hexo等环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参考 https://hexo.io/zh-cn/docs/generating.html</span></span><br><span class="line"></span><br><span class="line">hexo g -d          <span class="comment"># 生成静态文件并部署</span></span><br></pre></td></tr></table></figure><p>部署配置参考 <a href="https://hexo.io/zh-cn/docs/deployment.html">文档</a></p><h2 id="自动部署"><a href="#自动部署" class="headerlink" title="自动部署"></a>自动部署</h2><p><a href="https://travis-ci.org/">Travis CI</a> 收费了, 改用 Github Actions.<br>脚本见本仓库 <code>.github\workflows\main.yml</code>  </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用Hexo搭建博客, 并部署到github pages  &lt;/p&gt;</summary>
    
    
    
    <category term="小折腾" scheme="https://blog.cearl.cc/categories/%E5%B0%8F%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="Hexo" scheme="https://blog.cearl.cc/tags/Hexo/"/>
    
    <category term="NexT" scheme="https://blog.cearl.cc/tags/NexT/"/>
    
    <category term="github pages" scheme="https://blog.cearl.cc/tags/github-pages/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.cearl.cc/posts/1/"/>
    <id>https://blog.cearl.cc/posts/1/</id>
    <published>2018-05-31T12:16:13.000Z</published>
    <updated>2022-02-19T14:42:39.158Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    <category term="小折腾" scheme="https://blog.cearl.cc/categories/%E5%B0%8F%E6%8A%98%E8%85%BE/"/>
    
    
    <category term="testing" scheme="https://blog.cearl.cc/tags/testing/"/>
    
  </entry>
  
</feed>
